 
/** 
 *  DISTRIBUTE HUFF EXERCISE
 *  
 *  The task is to enable this contract, when called with function `distribute(address[])` to
 *  distribute the value sent with the call to each address in the address array as evenly.
 *  Revert if array length is 0
 *  Assume that array length would always be less than or equal to msg.value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */
 
 #define function distribute(address[]) payable returns()

#define macro DISTRIBUTE() = takes(0) returns(0) {
    
    0x04 calldataload 0x04 add dup1  // [offset, offset]
    calldataload                     // [nArgs, offset]
    dup1 callvalue div               // [value, nArgs, offset]
    dup2 iszero revertJump jumpi
    swap2                           // [offset, nArgs, value]

    start:
        dup2 iszero endJump jumpi
        0x20 add      // [offset, nArgs, value]

        //gas, address, value, argsOffset, argsSize, retOffset, retSize
        0x00 0x00 0x00 0x00 dup7
        dup6 calldataload
        gas
        call

        pop
        swap1 0x01 swap1 sub     //[nArgs-1, offset, value]
        swap1                    //[offset, nArgs-1, value]
        start jump

    endJump:
        0x00 0x00 return

    revertJump:
        0x00 0x00 revert
}

 #define macro MAIN() = takes(0) returns(0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(distribute) eq distributeLabel jumpi

    0x00 0x00 revert

    distributeLabel:
        DISTRIBUTE()
 }