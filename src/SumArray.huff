
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)

#define macro SUM_ARRAY() = takes(0) returns(0) {

    0x04 calldataload 0x04 add dup1 
    calldataload      // offset, nArgs
    returndatasize              // offset, nArgs, sum
    dup3             // offset, nArgs, sum, offset
    start:
        dup3 iszero endJump jumpi
        0x20 add      // nArgs, sum, offset
        swap1         // nArgs, offset, sum
        dup2 calldataload
        add          // nArgs, offset, sum
        swap2        // sum, offset, nArgs
        0x01 swap1 sub     // sum, offset, nArgs - 1
        swap2        // nArgs - 1, offset, sum
        swap1
        start jump
    endJump:
        pop
        returndatasize mstore
        0x20 returndatasize return
        
}

#define macro MAIN() = takes(0) returns(0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(sumArray) eq sum jumpi

    0x00 0x00 revert

    sum:
        SUM_ARRAY()
}