/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro BALANCE_OF() = takes(0) returns(0) {
    0x04 calldataload 
    0x00 mstore
    0x40 0x00 sha3   // key(balance[sender])
    sload

    returndatasize mstore
    0x20 returndatasize return
}

#define macro WITHDRAW() = takes(0) returns(0) {
    caller 0x00 mstore
    0x40 0x00 sha3   // key(balance[sender])
    dup1 sload            // balance[sender], key(balance[sender])
    0x04 calldataload dup2 dup2    // value, balance[sender],value,balance[sender], key(balance[sender])
    gt skip jumpi            // value, balance[sender], key(balance[sender])
    swap1 sub swap1 sstore

    //gas, address, value, argsOffset, argsSize, retOffset, retSize
    0x00 0x00 0x00 0x00 0x04 calldataload
    caller
    gas
    call
    0x00 0x00 return

    skip:
        0x00 0x00 revert
}

#define macro RECEIVE() = takes(0) returns(0) {
    caller 0x00 mstore 
    0x40 0x00 sha3   // key(balance[sender])
    dup1 sload       // balance[sender], key(balance[sender])
    callvalue
    add              // balance[sender]+value, key(balance[sender])
    swap1 sstore           

    returndatasize returndatasize return
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(balanceOf) eq balanceOfLabel jumpi
    dup1 __FUNC_SIG(withdraw) eq withdrawLabel jumpi


    callvalue receive jumpi

    balanceOfLabel:
        BALANCE_OF()
    withdrawLabel:
        WITHDRAW()

    receive:
        RECEIVE()
}
