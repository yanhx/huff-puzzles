
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)

#define macro ADD1() = takes (0) returns (0) {
    0x04 calldataload
    0x01 add
    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}


#define macro MAIN() = takes(0) returns(0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(add1) eq add1label jumpi

    0x00 0x00 revert

    add1label:
        ADD1()
}